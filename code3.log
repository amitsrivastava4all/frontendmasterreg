parseInt("100");
100
window;
Window {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …}
window.parseInt("100");
100
function show(){
console.log("I am SHow ");
}
undefined
show();
VM176:2 I am SHow 
undefined
window.show();
VM176:2 I am SHow 
undefined
window == this;
true
this;
Window {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …}
function show(){
console.log("I am SHow ",this);
}
undefined
window.show();
VM266:2 I am SHow  Window {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …}
undefined
var obj = {
show(){
console.log("SHOW OBJ ");
}
}
undefined
window.obj;
{show: ƒ}
window.obj.show();
VM348:3 SHOW OBJ 
undefined
var obj = {
show(){
console.log("SHOW OBJ ",this);
}
}
undefined
window.obj.show();
VM399:3 SHOW OBJ  {show: ƒ}
undefined
let obj2 = {
myshow(){
console.log(" I am obj2 show");
}
}
undefined
window.obj2;
undefined
obj2.myshow();
VM507:3  I am obj2 show
undefined
var x = 10;
undefined
var y = 0;
undefined
var z = x/y;
undefined
z;
Infinity
isFinite(z);
false
isFinite(z)?z:0;
0
isNaN("aMIT"-100)
true
isNaN("aMIT"-100)?0:10;
0
var arr = [10,20,30,40,50];
undefined
arr.pop();
50
arr.splice(1,1);
[20]
arr.splice(1,2);
(2) [30, 40]
arr;
[10]
var arr = [10,20,30,40,50];
undefined
arr;
(5) [10, 20, 30, 40, 50]
arr.length=0;
0
arr;
[]
var arr = [10,20,30,40,50];
undefined
arr.splice(0);
(5) [10, 20, 30, 40, 50]
arr;
[]
var arr = [10,20,30,40,50];
undefined
arr =[];
[]
var arr = [10,20,30,40,50];
undefined
arr.splice(1,2,100,900,777);
(2) [20, 30]0: 201: 30length: 2__proto__: Array(0)
arr;
(6) [10, 100, 900, 777, 40, 50]
show
ƒ show(){
console.log("I am SHow ",this);
}
console.dir(show);
VM980:1 ƒ show()arguments: nullcaller: nulllength: 0name: "show"prototype: {constructor: ƒ}__proto__: ƒ ()apply: ƒ apply()arguments: (...)bind: ƒ bind()call: ƒ call()caller: (...)constructor: ƒ Function()length: 0name: ""toString: ƒ toString()Symbol(Symbol.hasInstance): ƒ [Symbol.hasInstance]()get arguments: ƒ ()set arguments: ƒ ()get caller: ƒ ()set caller: ƒ ()__proto__: Object[[FunctionLocation]]: <unknown>[[Scopes]]: Scopes[0][[FunctionLocation]]: VM266:1[[Scopes]]: Scopes[2]
undefined
function add(x,y){
return x + y;
}
undefined
add(100,200);
300
add();
NaN
undefined + undefined;
NaN
add(10);
NaN
if(typeof x=='undefined'){
x = 0;
}
undefined
x;
10
x=undefined;
undefined
if(typeof x=='undefined'){
x = 0;
}
0
x= NaN;
NaN
add(NaN,NaN);
NaN
if(isNaN(x)){

}
undefined
x;
NaN
x=undefined;
undefined
typeof x;
"undefined"
var a;
undefined
a;
undefined
a?a:0;
0
a=100;
100
a?a:0;
100
a=NaN;
NaN
a?a:0;
0
function add(x,y){
x= x||0;
y = y||0;
return x + y;
}
undefined
add();
0
add(10);
10
add(10,NaN);
10
add(NaN,undefined);
0
add(10,20);
30
add(0,0);
0
function add(x=0,y=0){

return x + y;
}
undefined
add();
0
add(10);
10
add(10,20);;
30
add(1,2,3,4,5,6);
3
console.dir(add);
VM1666:1 ƒ add(x=0,y=0)arguments: nullcaller: nulllength: 0name: "add"prototype: {constructor: ƒ}__proto__: ƒ ()[[FunctionLocation]]: VM1558:1[[Scopes]]: Scopes[2]
undefined
function adder(){
console.log("I am Adder ");
}
undefined
adder();
VM1739:2 I am Adder 
undefined
adder(10,2);
VM1739:2 I am Adder 
undefined
adder(1,2,3,4,5);
VM1739:2 I am Adder 
undefined
function adder(){
console.log("I am Adder ",arguments.length);
}
undefined
adder();
VM1884:2 I am Adder  0
undefined
adder(10,20);
VM1884:2 I am Adder  2
undefined
adder(1,2,3,4,5);
VM1884:2 I am Adder  5
undefined
function adder(){
var sum = 0;
for(let i = 0; i<arguments.length; i++){
sum+=arguments[i];
}
return sum;
}
undefined
adder();
0
adder(10,120,30);
160
adder(10,120,30,5,6,7,8,9);
195
console.log("X is ",x);
VM2186:1 X is  undefined
undefined
x = 10;
10
y = 20;
20
z = 30;
30
console.log("X is ",x);
VM2252:1 X is  10
undefined
console.log("Hello");
VM2276:1 Hello
undefined
console.log("X is ",x, "ANd Y is ",y,"Z is ",z);
VM2347:1 X is  10 ANd Y is  20 Z is  30
undefined
adder("1",2,3,4,5);
"012345"
function adder(){
var sum = 0;
for(let i = 0; i<arguments.length; i++){
sum+=parseInt(arguments[i]);
}
return sum;
}
undefined
adder("1",2,3,4,5);
15
adder("One",2,3,4,5);
NaN
function adder(){
var sum = 0;
for(let i = 0; i<arguments.length; i++){
sum+=isNaN(parseInt(arguments[i]))?0:parseInt(arguments[i]);
}
return sum;
}
undefined
adder("1","Two",3,"4");
8
function adder(...args){
var sum = 0;
for(let a of args){
sum+=isNaN(parseInt(a))?0:parseInt(a);
}
return sum;
}
undefined
adder("1","Two",3,"4");
8
adder("One",2,3,4,5);
14
